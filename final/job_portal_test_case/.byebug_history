c
subject.body
job
c
user
c
              )
                }
                  user_name: user.user_name,email: user.email,password:user.password,type:user.type
                params: {
                :create,
              post(
expect {
c
subject
subject.body
response
response.body
c
response.body
c
            }.to change{ User.count }.by(1)
              )
                }
                  user_name: user.user_name,email: user.email,password:user.password,type:user.type
                params: {
                :create,
              post(
            }.to change{ User.count }.by(1)expect {
              )
                }
                  user_name: user.user_name,email: user.email,password:user.password,type:user.type
                params: {
                :create,
              post(
expect {
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
expect(subject).to change{ User.count }.by(1)
JSON.parse(subject.body)
c
expect(JSON.parse(subject.body)).to eq("id"=>user.id, "user_name"=>user.user_name, "email"=>user.email, "type"=>user.type)
JSON.parse(subject.body)
c
expect(JSON.parse(subject.body)).to eq("id"=>user.id, "user_name"=>"its_ram", "email"=>"ramkush@gmail.com", "type"=>"JobSeeker")
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
@current_user
c
expect(JSON.parse(subject.body)).to eq("error"=>["User name can't be blank"])
c
expect(JSON.parse(subject.body)).to eq("error"=>["User name can't be blank"])
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
user.id
user
c
user
expect(JSON.parse(subject.body)).to eq("id"=>user.id, "user_name"=>user.user_name, "email"=>user.email, "type"=>user.type)
JSON.parse(subject.body)
c
expect(JSON.parse(subject.body)).to eq("error"=>["User name can't be blank"])
JSON.parse(subject.body)
expect(subject).to have_http_status(422)
c
expect(subject).to have_http_status(422)
expect(JSON.parse(subject.body)).to eq("error"=>["User name can't be blank"])
JSON.parse(subject.body)
user
c
JSON.parse(subject.body)
subject.body
user
c
JSON.parse(subject.body)
user.save
user
params
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
user.id
user
user.save 
user = User.new(user_params)
user.save 
User.new(user_params)
user_params
c
expect(JSON.parse(subject.body)).to eq("id"=>user.id, "user_name"=>user.user_name, "email"=>user.email, "type"=>user.type)
JSON.parse(subject.body)
subject.body
subject
expect(JSON.parse(subject.body)).to eq("id"=>user.id, "user_name"=>user.user_name, "email"=>user.email, "type"=>user.type)
JSON.parse(subject.body)
JSON.parse(subject.body)cc\
c
JSON.parse(subject.body)cc\
JSON.parse(subject.body)c
JSON.parse(subject.body)
cexpect(JSON.parse(subject.body)).to eq(id: user.id, "user_name"=>user.user_name, "email"=>user.email, "type"=>user.type)
c
expect(JSON.parse(subject.body)).to eq( "user_name"=>user.user_name, "email"=>user.email, "type"=>user.type)
JSON.parse(subject.body)
c
expect(JSON.parse(subject.body)).to eq("id"=>user.id, "user_name"=>user.user_name, "email"=>user.email, "type"=>user.type)
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
expect(JSON.parse(subject.body)).to eq("error"=>["User name can't be blank"])
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
expect(JSON.parse(subject.body)).to eq("User name can't be blank")
"User name can't be blank"expect(JSON.parse(subject.body)).to eq("User name can't be blank")
JSON.parse(subject.body)
c
expect(JSON.parse(subject.body)).to eq("User name can't be blank")
JSON.parse(subject.body)
c
expect(JSON.parse(subject.body)).to eq("User name can't be blank", "Email can't be blank", "Email Please Enter Valid Email")
expect(subject).to have_http_status(422)
c
expect(JSON.parse(subject.body)).to eq("id"=>41, "user_name"=>"its_ramd", "email"=>"ramkush@gmail.com", "type"=>"JobSeeker")
c
expect(JSON.parse(subject.body)).to eq("id"=>41, "user_name"=>"its_ram", "email"=>"ramkush@gmail.com", "type"=>"JobSeeker")
c
JSON.parse(subject.body)
expect(JSON.parse(subject.body)).to eq("User name can't be blank", "Email can't be blank", "Email Please Enter Valid Email")
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
cJSON.parse(subject.body)
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
JSON.parse(subject.body)c
c
render json: user, status: 201
user.save  
user = User.new(user_params)
user_params
c
render json: user, status: 201
c
JSON.parse(subject.body)c
JSON.parse(subject.body)
c
@current_user
render json: @current_user,status: 200
c
 render json: user, status: 201
user_params
c
JSON.parse(subject.body)
c
expect(JSON.parse(subject.body)).to eq("id"=>41, "user_name"=>"its_ram", "email"=>"ramkush@gmail.com", "type"=>"JobSeeker")
expect(subject.body).to eq("id"=>41, "user_name"=>"its_ram", "email"=>"ramkush@gmail.com", "type"=>"JobSeeker")
expect(subject.body).to eq("id"=>41, "user_name"=>"its_ram", "email"=>"ramkush@gmail.com")
expect(subject).to eq("id"=>41, "user_name"=>"its_ram", "email"=>"ramkush@gmail.com")
c
expect(subject).to to eq("id"=>41, "user_name"=>"its_ram", "email"=>"ramkush@gmail.com")
expect(subject).to to eq("id"=>41, "user_name"=>"its_ram", "email"=>"ramkush@gmail.com
c
JSON.parse(subject.body)
subject.body
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
c
JSON.parse(subject.body)
expect(response).to eq(user)
JSON.parse(subject.body)
c
JSON.parse(subject.body)
response.body
c
response.body
user.save
response.body
JSON.parse(subject.body)
subject.body
c
@user.email
@user
c
@user
c
subject.body
c
subject.body
c
user_params
c
subject.body
c
subject.body
c
subject.body
c
 expect(subject).to have_http_status(401)
c
 expect(subject).to have_http_status(401)
c
subject.body
c
JSON.parse(subject.body)
subject.body
subject
c
@current_user
c
subject.body
c
subject.body
c
@current_user
c
subject.body
c
subject.body
subject
c
subject
c
@current_user.user_profile
c
x
subject.body
c
subject.body
c
subject.body
